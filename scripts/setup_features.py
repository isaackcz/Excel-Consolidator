"""
Setup script for Excel Consolidator Error Reporting and Auto-Update features

This script helps configure the error reporting and auto-update features.
Run this script to set up your email credentials and GitHub repository information.
"""

import os
import sys
from pathlib import Path

def create_config_file():
    """Create or update the config.py file with user input."""
    
    print("=" * 60)
    print("Excel Consolidator - Feature Setup")
    print("=" * 60)
    print()
    
    # Check if config.py already exists
    config_exists = os.path.exists("config.py")
    
    if config_exists:
        print("‚ö†Ô∏è  config.py already exists.")
        response = input("Do you want to update it? (y/n): ").lower().strip()
        if response != 'y':
            print("Setup cancelled.")
            return
    
    print("Let's set up your error reporting and auto-update features:")
    print()
    
    # Error Reporting Configuration
    print("üìä ERROR REPORTING SETUP (Google Sheets)")
    print("-" * 40)
    
    error_reporting_enabled = input("Enable error reporting? (y/n): ").lower().strip() == 'y'
    
    if error_reporting_enabled:
        print("\nError reporting will use Google Sheets (much simpler than email!)")
        print("Your spreadsheet: https://docs.google.com/spreadsheets/d/1eipG_5UgnkvQGcxpQi48fAq2ZRF_ZjtNzsliVdNkEnU/")
        print()
        
        # Use the provided spreadsheet
        spreadsheet_id = "1eipG_5UgnkvQGcxpQi48fAq2ZRF_ZjtNzsliVdNkEnU"
        sheet_name = input("Enter sheet name (default: Sheet1): ").strip() or "Sheet1"
        
        print("\nOptional: Google Apps Script setup for better integration:")
        print("1. Go to https://script.google.com/")
        print("2. Create a new project")
        print("3. Copy the code from google_apps_script.js")
        print("4. Deploy as a web app")
        print("5. Copy the web app URL")
        print()
        
        apps_script_url = input("Enter Google Apps Script URL (optional, press Enter to skip): ").strip()
        
        # Keep legacy email settings for compatibility
        sender_email = "isaacrita.02@gmail.com"
        sender_password = "your_app_password_here"
        recipient_email = "isaacrita.02@gmail.com"
    else:
        spreadsheet_id = "1eipG_5UgnkvQGcxpQi48fAq2ZRF_ZjtNzsliVdNkEnU"
        sheet_name = "Sheet1"
        apps_script_url = None
        sender_email = "isaacrita.02@gmail.com"
        sender_password = "your_app_password_here"
        recipient_email = "isaacrita.02@gmail.com"
    
    print()
    
    # Auto-Update Configuration
    print("üîÑ AUTO-UPDATE SETUP")
    print("-" * 30)
    
    auto_update_enabled = input("Enable auto-updates? (y/n): ").lower().strip() == 'y'
    
    if auto_update_enabled:
        print("\nFor auto-updates, you need:")
        print("1. A GitHub repository with releases")
        print("2. Repository owner username")
        print("3. Repository name")
        print()
        
        github_owner = input("Enter GitHub username: ").strip()
        github_repo = input("Enter repository name: ").strip()
        
        if not github_owner or not github_repo:
            print("‚ùå GitHub username and repository name are required for auto-updates.")
            auto_update_enabled = False
    else:
        github_owner = "your_username"
        github_repo = "excel-consolidator"
    
    print()
    
    # Application Configuration
    print("üì± APPLICATION SETUP")
    print("-" * 30)
    
    app_name = input("Enter application name (default: Excel Consolidator): ").strip() or "Excel Consolidator"
    app_version = input("Enter current version (default: 1.0.0): ").strip() or "1.0.0"
    
    print()
    
    # Generate config.py content
    config_content = f'''"""
Configuration file for Excel Consolidator

This file contains configuration settings for error reporting and auto-updates.
Auto-generated by setup_features.py
"""

# Error Reporting Configuration - Google Sheets
ERROR_REPORTING_ENABLED = {error_reporting_enabled}
GOOGLE_SPREADSHEET_ID = "{spreadsheet_id}"
GOOGLE_SHEET_NAME = "{sheet_name}"

# Google Apps Script URL (optional - set this after deploying the Apps Script)
GOOGLE_APPS_SCRIPT_URL = {f'"{apps_script_url}"' if apps_script_url else 'None'}

# Legacy email settings (kept for compatibility, but not used)
ERROR_REPORT_EMAIL = "{recipient_email}"
ERROR_REPORT_SENDER = "{sender_email}"
ERROR_REPORT_SENDER_PASSWORD = "{sender_password}"
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587

# Auto-Update Configuration
AUTO_UPDATE_ENABLED = {auto_update_enabled}
GITHUB_OWNER = "{github_owner}"
GITHUB_REPO = "{github_repo}"
UPDATE_CHECK_INTERVAL = 24 * 60 * 60  # Check every 24 hours (in seconds)

# Application Configuration
APP_NAME = "{app_name}"
APP_VERSION = "{app_version}"
APP_DESCRIPTION = "Advanced Excel file consolidation tool"

# Logging Configuration
LOG_LEVEL = "INFO"  # DEBUG, INFO, WARNING, ERROR
LOG_TO_FILE = True
LOG_TO_CONSOLE = True

# Configuration functions
def get_smtp_config():
    """Get SMTP configuration for error reporting."""
    return {{
        "server": SMTP_SERVER,
        "port": SMTP_PORT,
        "sender_email": ERROR_REPORT_SENDER,
        "sender_password": ERROR_REPORT_SENDER_PASSWORD,
        "recipient_email": ERROR_REPORT_EMAIL
    }}

def get_github_config():
    """Get GitHub configuration for auto-updates."""
    return {{
        "owner": GITHUB_OWNER,
        "repo": GITHUB_REPO,
        "check_interval": UPDATE_CHECK_INTERVAL
    }}

def get_app_config():
    """Get application configuration."""
    return {{
        "name": APP_NAME,
        "version": APP_VERSION,
        "description": APP_DESCRIPTION,
        "error_reporting_enabled": ERROR_REPORTING_ENABLED,
        "auto_update_enabled": AUTO_UPDATE_ENABLED
    }}

# Validation function
def validate_config():
    """Validate configuration settings."""
    errors = []
    
    if ERROR_REPORTING_ENABLED:
        if not ERROR_REPORT_SENDER_PASSWORD or ERROR_REPORT_SENDER_PASSWORD == "your_app_password_here":
            errors.append("ERROR_REPORT_SENDER_PASSWORD must be set to your Gmail App Password")
        
        if not ERROR_REPORT_SENDER or ERROR_REPORT_SENDER == "isaacrita.02@gmail.com":
            errors.append("ERROR_REPORT_SENDER should be updated to your email address")
    
    if AUTO_UPDATE_ENABLED:
        if not GITHUB_OWNER or GITHUB_OWNER == "your_username":
            errors.append("GITHUB_OWNER must be set to your GitHub username")
        
        if not GITHUB_REPO or GITHUB_REPO == "excel-consolidator":
            errors.append("GITHUB_REPO must be set to your repository name")
    
    return len(errors) == 0, errors

if __name__ == "__main__":
    # Validate configuration when run directly
    is_valid, errors = validate_config()
    
    if is_valid:
        print("‚úÖ Configuration is valid!")
        print(f"App: {{APP_NAME}} v{{APP_VERSION}}")
        print(f"Error Reporting: {{'Enabled' if ERROR_REPORTING_ENABLED else 'Disabled'}}")
        print(f"Auto-Update: {{'Enabled' if AUTO_UPDATE_ENABLED else 'Disabled'}}")
    else:
        print("‚ùå Configuration has errors:")
        for error in errors:
            print(f"  - {{error}}")
        print("\\nPlease update the configuration values in this file.")
'''
    
    # Write config.py
    try:
        with open("config.py", "w", encoding="utf-8") as f:
            f.write(config_content)
        
        print("‚úÖ Configuration saved to config.py")
        print()
        
        # Validate the configuration
        print("üîç VALIDATING CONFIGURATION")
        print("-" * 30)
        
        try:
            # Import and validate the config
            import config
            is_valid, errors = config.validate_config()
            
            if is_valid:
                print("‚úÖ Configuration is valid!")
                print(f"App: {app_name} v{app_version}")
                print(f"Error Reporting: {'Enabled' if error_reporting_enabled else 'Disabled'}")
                print(f"Auto-Update: {'Enabled' if auto_update_enabled else 'Disabled'}")
            else:
                print("‚ùå Configuration has errors:")
                for error in errors:
                    print(f"  - {error}")
        
        except Exception as e:
            print(f"‚ö†Ô∏è  Could not validate configuration: {e}")
        
        print()
        print("üéâ Setup completed!")
        print()
        print("Next steps:")
        print("1. Run your application to test the features")
        print("2. Check the logs/ directory for error reporting and auto-update logs")
        print("3. Test error reporting by triggering an error")
        print("4. Test auto-update by creating a new release on GitHub")
        
    except Exception as e:
        print(f"‚ùå Failed to save configuration: {e}")

def main():
    """Main setup function."""
    try:
        create_config_file()
    except KeyboardInterrupt:
        print("\n\nSetup cancelled by user.")
    except Exception as e:
        print(f"\n‚ùå Setup failed: {e}")

if __name__ == "__main__":
    main()
